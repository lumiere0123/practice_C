# So far, we have a class that models a point. It lets users
# get and set the x and y coordinates. Note the default params.
# (Note: We aren't using properties for this because we 
# don't need to mediate access. x and y are simple integers.)
>>> p = Point()
>>> p.x
0
>>> p.y
0
>>> p = Point(y=6)
>>> p.x
0
>>> p.y
6
>>> p = Point(3, 2)
>>> p.x
3
>>> p.y
2

# Our Point also has custom __str__ and __repr__ 
# implementations. This lets us convert the type into a 
# string. Note that the __repr__ prints the internal 
# object variables, and uses their __repr__'s, too. We
# use __repr__ within __repr__ because we want to make
# sure it remains unamibiguous.
>>> p
Point(3, 2)
>>> str(p)
'(3, 2)'

# Now, let's try some other things. Can we compare points?
>>> p2 < p
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unorderable types: Point() < Point()

# Or can we subtract them?
>>> p3 = Point(2, 3)
>>> p3 - p
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'Point' and 'Point'

# To implement this functionality, we need to add some more special 
# methods to our Point.  
# First, we implement __lt__. It took us some time to figure out 
# exactly what we wanted from it, but we decided (a design decision --
# we could have picked something else!) that we wanted to evaluate
# how far the point is from the origin.  
>>> p < p2
True
>>> p2 = Point()
>>> p2
Point(0, 0)
>>> p < p2
False

# But other operators don't work. We have a great deal more to implement.
>>> p >= p2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unorderable types: Point() >= Point()

# Now we've implemented __eq__. And __ne__. And __ge__ ...
>>> p = Point(2, 2)
>>> p2 = Point()
>>> p == p2
False
>>> p2 = Point(2, 2)
>>> p == p2
True
>>> p2 = Point(-2, 2)
>>> p == p2
True

# Implementing all six operators is fine, but it's tedious
# in the common case that the operators are related to each
# other. (For example, we normally think of < and >= as being 
# opposites.) In this case, we can use functool's total_ordering
# to do some of the work for us. 

# However, it's important to remember that Python gives you 
# total flexibility: if you want == and != to NOT be opposites
# -- to define some sort of other relationship -- then you have
# the flexibility to do so. It's up to you to determine how you 
# want your class to behave.

# What about other binary operators? How about -? 
# It didn't work for tuples, which is why we decided to implement
# our own class.  
>>> (2, 3) - (1, 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'tuple' and 'tuple'
>>> p = Point(2, 3)
>>> p2 = Point(1, 0)

# Unfortunately, it doesn't yet work for us, either. We need to 
# implement the hook that is associated with A - B: __sub__.
>>> p - p2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'Point' and 'Point'

# And done! It's just like the equality operators. self is the object
# on the left, and we define a second argument to be the object on 
# the right. 
>>> p = Point(2, 3)
>>> p2 = Point(1, 0)
>>> p - p2
Point(1, 3)
>>> p2 - p
Point(-1, -3)

# But ... what happens if we do something odd? What if we subtract 
# an int from a Point? Or a Point from an int?
>>> p - 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "point.py", line 21, in __sub__
    return Point(self.x - rhs.x, self.y - rhs.y)
AttributeError: 'int' object has no attribute 'x'
>>> 2 - p
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'int' and 'Point'

# We want the same error to show up: a typeerror. We don't 
# want to reveal any internal details about how Point is 
# implemented. See the final Point code to see how we raise
# the correct error.

