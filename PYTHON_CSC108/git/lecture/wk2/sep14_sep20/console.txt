# Today, we're looking at a new type: boolean (bool) values.
# Boolean values allow us to answer questions and to make
# choices. 

# There are two boolean values:
>>> True
True
>>> False
False
>>> type(False)
<class 'bool'>

# Most of the time, we don't use True and False directly. Instead, we
# use expressions that evaluate to boolean values. Here are examples
# using comparison operators:
#   == "is equal to"
#   >  "greater than"
#   <  "less than"
#   >= "greater than or equal to"
#   <= "less than or equal to"
#   != "not equal to"
>>> 4 > 3
True
>>> 7 >= 7
True
>>> 4 * 3 == 12
True
>>> 4 == 4.0
True
>>> day = 23
>>> day < 30
True
>>> day + 1 > 24
False
>>> day > day + 1
False

# In addition to the comparison operators, we can use logical operators
# to create boolean expressions:
#   not
#   and
#   or
>>> True and False
False
>>> True or False
True
>>> not True
False
>>> not not True
True
>>> monday = True
>>> sunny = False
>>> monday and sunny
False
>>> monday
True
>>> sunny
False
>>> monday and not sunny
True

# Parenthesis can be used to group terms. I recommend using parenthesis to 
# make sure that you're evaluating the expression you intend to write.
>>> True or False
True
>>> True and (False or True)
True

# If you don't use parenthesis, you have to know the order of operations for
# "and", "or", and "not" ...
>>> True and False or True
True
>>> False and False or True
True
>>> True or False and False
True
>>> (True or False) and False
False
>>> True or (False and False)
True
>>> (False and False) or True
True
>>> False and True
False
>>> False and False
False
>>> not False and True
True
>>> not False and False
False
>>> (not False) and False
False

# We can save boolean values into variables (just like mathematical values).
>>> time = 3
>>> early = time < 12
>>> late = not early
>>> late
False
>>> early
True
>>> late
False

# Remember: just like with numbers, we're not saving the expression. We're 
# saving the value that the expression evaluates to. Hence, changing "time"
# doesn't change the value of early (which was, above, calculated using 
# the earlier value of "time").
>>> time = 15
>>> early
True
>>> late
False
>>> early
True
>>> time = 3
>>> new_time = time + 1
>>> time = 5
>>> new_time
4
>>> new_time = time + 1
>>> new_time
6

# Short-circuiting. Python doesn't evaluate both sides of a boolean expression
# if it doesn't have to. In particular, if the first half of "X or Y" is True,
# then Y isn't evaluated. In "X and Y", if X is False, then Y isn't evaluated.
>>> 1 / 0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> 1 / 0 == 5
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> early or 1 / 0 == 5
True
# We didn't evaluate 1 / 0 == 5!
>>> 1 / 0 == 5 or early
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> False and 1 / 0 == 5
False
>>> True and 1 / 0 == 5
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> 

# That doesn't mean that you can omit the second half of a boolean 
# expression. That isn't an execution issue: it's a syntax issue. 
# Python requires correct syntax.
>>> True or
  File "<stdin>", line 1
    True or
          ^
SyntaxError: invalid syntax

# That does mean that you could have unnamed variables ... but please
# don't do this in practice. Good question, but bad practice!
>>> True or this_variable_I_just_created
True
>>> this_variable_I_still_havent_created or True
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'this_variable_I_still_havent_created' is not defined

# Earlier, you asked why early didn't change when the variable time,
# which was used to compute it, changed. That's because variables store
# references to values -- not references to code that is evaluated 
# each time you access the value. If you want to store code, you must
# write a function.
>>> def is_early(time):
...     return time < 12
... 
>>> is_early
<function is_early at 0x1003c1bf8>

# Now, apply the function to the time that you want to evaluate.
>>> is_early(3)
True
>>> is_early(15)
False

# Here's another example.
>>> def can_vote(age, is_citizen):
...     return age >= 18 and is_citizen
... 
>>> can_vote(19, True)
True
>>> can_vote(19, False)
False

# Booleans have integer values, and integers have boolean values. 
>>> int(True)
1
>>> int(False)
0
>>> bool(3)
True
>>> bool(0)
False
>>> 

# You'll see this in code sometimes, but it's not good style to use
# booleans in mathematical expressions. Please don't do it.
>>> 3 + True
4

# We wrote is_even in another file. It relies on the use of the modulus 
# operator. Modulus is frequently used in boolean expressions.
>>> 7 % 2
1
>>> 6 % 2
0
peters43:~/courses/108/utm/lectures/lecture4/andrew/code$ python -i is_even.py 
>>> is_even(2)
True
>>> is_even(7)
False
>>> 7 % 2 == 0
False
