# On Wednesday, we looked at list mutability ...
>>> L = [1, 2, 3, 4, 5]
>>> L2 = L
>>> L2[1] = 999
>>> L, L2
([1, 999, 3, 4, 5], [1, 999, 3, 4, 5])
>>> L = [1, 2, 3, 4, 5]
>>> L2 = L
>>> L2 = L2 + [6]
>>> L, L2
([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])
>>> L = [1, 2, 3, 4, 5]
>>> L2 = L
>>> L2.append(6)
>>> L, L2
([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])

# Mutability can lead to some tricky errors, but it also allows us to 
# create functions that modify their arguments. (This is sometimes called
# a side-effect.)
>>> def add_item(L, item):
...     L.append(item)
... 
>>> L
[1, 2, 3, 4, 5, 6]
>>> add_item(L, 7)
>>> None
>>> L
[1, 2, 3, 4, 5, 6, 7]

# But how can you create a copy of a list without an alias?
>>> L2 = list(L)
>>> L2
[1, 2, 3, 4, 5, 6, 7]
>>> L
[1, 2, 3, 4, 5, 6, 7]
>>> id(L)
4300495304
>>> id(L2)
4301494536

# You can also use slicing to create a copy.
>>> L2 = L[:]
>>> id(L)
4300495304
>>> id(L2)
4301493256

# However, neither creates a "deep copy" -- a copy that 
# copies all of the items within the list. Both of these copies
# are "shallow".
>>> L = [[1, 2, 3], ['a', 'b', 'c']]
>>> L
[[1, 2, 3], ['a', 'b', 'c']]
>>> L2 = list(L)
>>> L2.append([1.0, 2.0, 3.0])
>>> L2
[[1, 2, 3], ['a', 'b', 'c'], [1.0, 2.0, 3.0]]
>>> L
[[1, 2, 3], ['a', 'b', 'c']]
>>> L2[0].append(4)
>>> L2
[[1, 2, 3, 4], ['a', 'b', 'c'], [1.0, 2.0, 3.0]]
>>> L
[[1, 2, 3, 4], ['a', 'b', 'c']]

# We can use many of the same loop patterns on lists that 
# we used on strings. Here is a counter pattern.
>>> L = [1, 2, 3, 4, 5]
>>> sum = 0
>>> counter = 1
>>> while counter < len(L) - 1:
...     sum = sum + counter
...     counter = counter + 2
... 
>>> sum
4
>>> counter = 1
>>> sum = 0
>>> while counter < len(L) - 1:
...     item = L[counter]
...     item = item + 2
...     counter = counter + 2
... 
>>> counter
5
>>> L
[1, 2, 3, 4, 5]
>>> counter = 1
>>> while counter < len(L) - 1:
...     L[counter] = L[counter] + 2
...     counter = counter + 2
... 
>>> L
[1, 4, 3, 6, 5]

# See format_names for an example of an accumulator pattern and a new
# update-in-place pattern.

# While working on remove_invalid, we found some odd behaviour ...
>>> L = [1, 2, 3, 4, 5]
>>> for item in L:
...     L.remove(item)
... 
>>> L
[2, 4]
>>> L = [1, 2, 3, 4, 5]
>>> for item in L:
...     L.remove(item)
...     print(item)
... 
1
3
5
# The problem is that the behaviour of for loops is undefined if you modify
# the structure being iterated over. In this case, L is being modified as we 
# loop over it, so items are being skipped. (We can guess that Python is 
# keeping an index that is updated on each iteration of the loop, but we can't
# be sure.)
